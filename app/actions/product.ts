"use server";

import { createClient } from "@/lib/supabase"; // Assuming this path is correct
// *** FIX: Ensure types are imported ***
import { Product } from "@/types";
import { InventoryProduct } from "@/app/product/page";

/**
 * Adds a new product definition to the 'product' table.
 * This does NOT link it to a customer.
 * @param formData - The form data containing product details.
 * @param userEmail - The email of the user performing the action (currently unused, but kept for potential future logging/permissions).
 * @returns Object with success status or error message.
 */
export async function addProduct(formData: FormData, userEmail: string) {
  const supabase = await createClient();

  // --- Input Validation and Data Extraction ---
  const productName = formData.get("name") as string; // Match form input name='name'
  // const category = formData.get("category") as string; // Category isn't in the product table schema provided
  // const weightStr = formData.get("weightperunit") as string; // Weight isn't in the product table schema provided
  // const volumeStr = formData.get("volumeperunit") as string; // Volume isn't in the product table schema provided
  const maxQuantityStr = formData.get("MaxQuantity") as string | null; // Assuming you might add this field later
  const quantityStr = (formData.get("quantity") as string) || "0"; // Get quantity or default to 0
  const quantity = parseInt(quantityStr, 10);

  // Basic Server-Side Validation (Example)
  if (!productName || productName.trim() === "") {
    return { error: "Product Name is required." };
  }
  // Add more validation for other fields if they exist in your 'product' table

  // Prepare data for insertion based *only* on columns in the 'product' table
  const productData: Partial<Product> = {
    ProductName: productName.trim(),
    // Add other fields from your 'product' table schema if they are submitted by the form
    // e.g., MaxQuantity: maxQuantityStr ? parseInt(maxQuantityStr, 10) : null,
  };

  // Remove productid if it's auto-generated by the database (recommended)

  try {
    // Get the customer ID based on email
    const { data: customerData, error: customerError } = await supabase
      .from("customer")
      .select("customerid")
      .eq("email", userEmail)
      .single();

    if (customerError) {
      console.error("Failed to fetch customer:", customerError);
      return { error: "Could not find your customer account." };
    }

    const customerId = customerData.customerid;

    // 1. First insert the product
    const { data: productResult, error: productError } = await supabase
      .from("product")
      .insert([productData])
      .select("productid"); // Return the inserted product ID

    if (productError) {
      console.error("Product insert error:", productError);
      return { error: `Database error: ${productError.message}` };
    }

    if (!productResult || productResult.length === 0) {
      return { error: "Failed to create product (no ID returned)" };
    }

    const productId = productResult[0].productid;

    // 2. Now create an inventory record for this customer and product
    const inventoryData = {
      productid: productId,
      customerid: customerId,
      totalquantity: quantity || 1, // Use the provided quantity or default to 1
    };

    const { error: inventoryError } = await supabase
      .from("inventoryrecord")
      .insert([inventoryData]);

    if (inventoryError) {
      console.error("Inventory record insert error:", inventoryError);
      // Consider rolling back the product creation here
      return { error: `Failed to add to inventory: ${inventoryError.message}` };
    }

    console.log("Product added successfully and linked to customer inventory.");
    return { success: true };
  } catch (error) {
    console.error("Add product server action error:", error);
    return { error: "An unexpected error occurred" };
  }
}

/**
 * Gets inventory records for a specific customer, including product details.
 * Renamed for clarity as it fetches inventory, not just products.
 * @param customerId - The ID of the customer whose inventory to fetch.
 * @returns Object containing inventory products or an error message.
 */
// Use the imported InventoryProduct type here
export async function getCustomerInventoryProducts(
  customerId: number
): Promise<{ products?: InventoryProduct[]; error?: string }> {
  // Validate input
  if (!customerId || typeof customerId !== "number" || customerId <= 0) {
    return { error: "Invalid Customer ID provided." };
  }

  const supabase = await createClient();

  try {
    console.log("Fetching inventory for customer ID:", customerId);
    // Query inventoryrecord, filter by customerid, join product details
    const { data: inventoryData, error: inventoryError } = await supabase
      .from("inventoryrecord") // Query the linking table
      .select(
        `
          inventoryid,
          productid,
          customerid,
          totalquantity,
          product ( ProductName )
      `
      )
      .eq("customerid", customerId); // Filter by the specific customer

    if (inventoryError) {
      console.error("Supabase inventory fetch error:", inventoryError);
      return { error: `Database error: ${inventoryError.message}` };
    }

    // Map the data to the expected structure, handling potential nulls
    // Use the imported InventoryProduct type here
    const formattedProducts: InventoryProduct[] =
      inventoryData?.map((item) => ({
        inventoryid: item.inventoryid,
        productid: item.productid,
        customerid: item.customerid,
        totalquantity: item.totalquantity,
        // Access product name safely, handling the array structure and nulls
        name: item.product?.[0]?.ProductName ?? "N/A",
        // Customer details are not needed here as we filtered by customerId already
        customer: null,
      })) || [];

    console.log(
      `Found ${formattedProducts.length} inventory items for customer ${customerId}`
    );
    return { products: formattedProducts }; // Return the formatted data
  } catch (error) {
    console.error("Get customer inventory server action error:", error);
    return {
      error: "An unexpected server error occurred while fetching inventory",
    };
  }
}
